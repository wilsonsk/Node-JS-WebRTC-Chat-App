<script src="/socket.io/socket.io.js"></script>

		<video id="myVideoTag" autoplay></video>
		<video id="theirVideoTag" autoplay></video>
		<div>
			<input type="file" id="sendFile"/><br/>
			<progress id="fileProgress" value=“1” max="100"></progress>
			<a id="receivedFileLink"></a>
			<hr>
		</div>
		<div>
			<label>Your Name</label><input id="myName" type="text"/>
			<label>Message</label><input id="myMessage" type="text"/>
			<input id="sendMessage" type="submit"/>
			<div id="chatArea">Message Output:</br></div>
			<div id="signalingArea">Signaling Messages:</br></div>
		</div>
		
		<script>
			var myVideoArea = document.querySelector("#myVideoTag");
			var theirVideoArea = document.querySelector("#theirVideoTag");
			var myName = document.querySelector("#myName");
			var myMessage = document.querySelector("#myMessage");
			var sendMessage = document.querySelector("#sendMessage");
			var chatArea = document.querySelector("#chatArea");
			var signalingArea = document.querySelector("#signalingArea");
			var sendFile = document.querySelector("input#sendFile");
			var fileProgress = document.querySelector("progress#fileProgress");
			var downloadLink = document.querySelector('a#receivedFileLink');
			var ROOM = "chat";
			var SIGNAL_ROOM = "signal_room";
			var FILES_ROOM = "files";
			var configuration = {
				'iceServers': [{
					'url': 'stun:stun.l.google.com:19302'
				}]
			};
			var rtcPeerConn;
			var dataChannelOptions = {
				ordered: false, //no guaranteed delivery, unreliable but faster 
				maxRetransmitTime: 1000, //milliseconds
			};
			var dataChannel;
			var receivedFileName;
			var receivedFileSize;
			var fileBuffer = [];
			var fileSize = 0;
			
			io = io.connect();
			io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM});
			
			//Send a first signaling message to anyone listening
			//This normally would be on a button click
			io.emit('signal',{"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});
			
			io.on('signaling_message', function(data) {
				displaySignalMessage("Signal received: " + data.type);
				
				//Setup the RTC Peer Connection object
				if (!rtcPeerConn)
					startSignaling();
					
				if (data.type != "user_here") {
					var message = JSON.parse(data.message);
					if (message.sdp) {
						rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
							// if we received an offer, we need to answer
							if (rtcPeerConn.remoteDescription.type == 'offer') {
								rtcPeerConn.createAnswer(sendLocalDesc, logError);
							}
						}, logError);
					}
					else {
						rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
					}
				}
				
			});
			
			function startSignaling() {
				displaySignalMessage("starting signaling...");
				
                try{
                        rtcPeerConn = new RTCPeerConnection(configuration);
                }catch(err){
                        if(err){ console.log("browseer error...switching protocol");
                        rtcPeerConn = new webkitRTCPeerConnection(configuration); }
                }

				//rtcPeerConn = new webkitRTCPeerConnection(configuration, null);

				// send any ice candidates to the other peer
				rtcPeerConn.onicecandidate = function (evt) {
					if (evt.candidate)
						io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
					displaySignalMessage("completed that ice candidate...");
				};
				
				// let the 'negotiationneeded' event trigger offer generation
				rtcPeerConn.onnegotiationneeded = function () {
					displaySignalMessage("on negotiation called");
					rtcPeerConn.createOffer(sendLocalDesc, logError);
				}
				
				// once remote stream arrives, show it in the remote video element
				rtcPeerConn.onaddstream = function (evt) {
					displaySignalMessage("going to add their stream...");
					theirVideoArea.src = URL.createObjectURL(evt.stream);
				};
				
				// get a local stream, show it in our video tag and add it to be sent
				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
				navigator.getUserMedia({
					'audio': true,
					'video': true
				}, function (stream) {
					displaySignalMessage("going to display my stream...");
					myVideoArea.src = URL.createObjectURL(stream);
					rtcPeerConn.addStream(stream);
				}, logError);
			  
			}
					function sendLocalDesc(desc) {
				rtcPeerConn.setLocalDescription(desc, function () {
					displaySignalMessage("sending local description");
					io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
				}, logError);
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message);
			}
			
			io.on('announce', function(data) {
				displayMessage(data.message);
			});
			
			io.on('message', function(data) {
				displayMessage(data.author + ": " + data.message);
			});
			
			function displayMessage(message) {
				chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
			}
			
			function displaySignalMessage(message) {
				signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
			}
			
			sendMessage.addEventListener('click', function(ev){
				io.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
				//dataChannel.send(myName.value + " says " + myMessage.value);
				ev.preventDefault();
			}, false);
		
		</script>
